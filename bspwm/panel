#! /bin/zsh
# import config variables
. panel_config

# check if the panel is already running
# old
if [ $(pgrep -cx panel) -gt 1 ] ; then
	printf "%s\n" "The panel is already running." >&2
	exit 1
fi
# new
#if xdo id -a "$PANEL_WM_NAME" > /dev/null ; then
  #printf "%s\n" "The panel is already running." >&2
  #exit 1
#fi

# exit gracefully when terminated
trap 'trap - TERM; kill 0' INT TERM QUIT EXIT

# remove old panel_fifo and create new one
[ -e "$PANEL_FIFO" ] && rm "$PANEL_FIFO"
mkfifo "$PANEL_FIFO"

# bspwm workspace info
bspc subscribe report > "$PANEL_FIFO" &

# display current playing song info
# requires mpc
while true; do
  # Get the current status from mpc
  MUSIC=$(mpc)
  # When music is playing, mpc shows 3 lines, when stopped only one line. Get the number of lines.
  MUSIC_LINES=$(echo $MUSIC | wc -l) 
  # When number of lines is 3, music is playing
  if [[ $MUSIC_LINES -eq 3 ]]; then
    # get status: playing or paused
    MUSIC_STATUS=$(echo $MUSIC | awk 'NR==2' | awk '{print $1}' | tr -d '[]')
    if [[ $MUSIC_STATUS = "playing" ]]; then
      MUSIC_STATUS_ICON=$ICON_MEDIA_PLAY
    else
      MUSIC_STATUS_ICON=$ICON_MEDIA_PAUSE
    fi
    # get current playing song
    MUSIC_CURRENT=$(echo $MUSIC | awk 'NR==1')
    # get current position in song
    MUSIC_POS=$(echo $MUSIC | awk 'NR==2' | awk '{print $3}')
    # put all info together
    echo -e "MUSIC$MUSIC_STATUS_ICON $MUSIC_CURRENT - $MUSIC_POS"
  else
    # When number of lines is not 3, no music is playing: display stopped
    echo -e "MUSICstopped"
  fi
  sleep $REFRESH
done > "$PANEL_FIFO" &

# wifi ssid and signal strenght
while true; do
  WIFI_INFO=$(iw $WIFI_DEV link)
  if [[ $WIFI_INFO = "Not connected." ]]; then
    # display wifi disconnected
    echo -e "WIFI$ICON_WIFI_DISCONNECTED diconnected"
  else
    # get the ssid
    #WIFI_SSID=$(echo $WIFI_INFO | grep "SSID" | sed 's/SSID: //')
    # get the signal strength
    WIFI_SIGNAL=$(echo $WIFI_INFO | grep "signal" | sed 's/signal: //' | tr -d ' dBm')
    if (( $WIFI_SIGNAL > -50 )); then
      WIFI_SIGNAL_PERCENT="100"
    elif (( $WIFI_SIGNAL < -100 )); then
      WIFI_SIGNAL_PERCENT="0"
    else
      WIFI_SIGNAL_PERCENT=$(echo $((2 * (100 + $WIFI_SIGNAL))))
    fi
    # display all info
    echo -e "WIFI$ICON_WIFI_CONNECTED $WIFI_SIGNAL_PERCENT"
  fi
    sleep $REFRESH
done > "$PANEL_FIFO" &

# volume indicator
# requires amixer for alsa or pamixer for pulseaudio
while true; do
  # get the current pulseaudio volume ( use amixer for alsa )
  # uncomment for pulseaudio
  VOLUME=$(pamixer --get-volume)
  # uncomment for alsa
  #VOLUME=$(amixer get Master -M | grep -oE '[[:digit:]]*%' | tr -d '%')"
  # Adapt icon for high and low volume
  if [ $VOLUME -ge 50 ]; then
    echo -e "VOL$ICON_VOLUME_HIGH $VOLUME"
  else
    echo -e "VOL$ICON_VOLUME_LOW $VOLUME"
  fi
  sleep $REFRESH 
done > "$PANEL_FIFO" &

# battery indicator
# requires acpi
while true; do
  # check if battery is present
  if [ -e /sys/class/power_supply/BAT1 ]; then
    # get the battery info from acpi
    ACPI_STAT=$(acpi)
    # get the status: charging, discharging
    BAT_STAT=$(echo $ACPI_STAT | awk '{print $3}' | tr -d ',')
    # get the current battery load percentage
    BAT_PERC=$(echo $ACPI_STAT | awk '{print $4}' | tr -d '%,')
    if [[ $BAT_STAT = "Discharging" ]]; then
      echo -e "BAT$ICON_BATTERY_FULL $BAT_PERC"
    else
      echo -e "BAT$ICON_BATTERY_CHARGING $BAT_PERC"
    fi
  else
    echo -e "BAT$ICON_BATTERY_CHARGING"
  fi
  sleep $REFRESH
done > "$PANEL_FIFO" &
# clock
while true; do
  echo -e "S$ICON_DATE$(date +'%a %d %b') $ICON_CLOCK$(date +'%H:%M')"
  sleep $REFRESH
done > "$PANEL_FIFO" &

# import color variables
. panel_colors
# start the panel
cat "$PANEL_FIFO" | panel_bar | lemonbar -g "${PANEL_WIDTH}x${PANEL_HEIGHT}" -f "$PANEL_FONT_FAMILY" -f "$PANEL_FONT_ICON" -F "$COLOR_FOREGROUND" -B "$COLOR_BACKGROUND" -u 0 &

wait
